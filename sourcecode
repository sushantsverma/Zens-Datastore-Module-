local dsFunctions = {} --ds = Datastore (in case you're too dumb to notice)
local datastoreService = game:GetService("DataStoreService")

--[[------------------------------------README------------------------------------

This is an open-sourced Datastore module. [WIP]

The GET method uses 3 parameters. "plr" refers to the Local player, "dataStore" refers to the desired Data Store you're going
to be using, and "dataStoreKey" refers to the key in which you want to save the data to (preferably player's UserId).

The SET method uses 4 parameters. The parameters are the same as the GET method with one addition being "dataToSave". This parameter refers to the data that you want to save to the specific key.

Note: The data that you're saving will be converted into a table no matter it's original datatype for simplicity. This is done by the module.

*Specific instructions have been given inside the functions where needed.*

]]

function dsFunctions.CreateDatastore(plr : Player, dataStoreName : string, ordered : boolean)

	if ordered then
		return datastoreService:GetOrderedDataStore(dataStoreName)
	else 
		return datastoreService:GetDataStore(dataStoreName)
	end

end

function dsFunctions.GetData(plr : Player, dataStore : DataStore, dataStoreKey)

	local data 

	local defaultData = { -- Set your own custom data that a new user should have.
		["PlayerUserId"] = plr.UserId,
		["PlayerName"] = plr.Name,
		["Points"] = 0,
		["Level"] = 0,
		["Money"] = 0,
	}
	local success, errorMsg = pcall(function()
		data = dataStore:GetAsync(dataStoreKey)
		if data == nil then
			data = defaultData
		end
	end)

	if success then
		print("Successfully got data")
		print(data)
	else
		warn(errorMsg)
		repeat
			local success, errorMsg2 = pcall(function()
				data = dataStore:GetAsync(dataStoreKey)
				if data == nil then
					data = defaultData
				end
			end)
			print("Retrying to get data...")
			task.wait(5)
		until  success
	end

	return success, data
end

function dsFunctions.SetData(plr : Player, dataStore : DataStore, dataStoreKey, dataToSave)

	if type(dataToSave) ~= "table" then
		dataToSave = {[1] = dataToSave}
	end

	local success, errorMsg = pcall(function()
		dataStore:SetAsync(dataStoreKey, dataToSave)
	end)

	if success then
		print("Successfully saved data")
		print(dataToSave)
	else
		warn(errorMsg)
		repeat
			local success, errorMsg2 = pcall(function()
				dataStore:SetAsync(dataStoreKey, dataToSave)
			end)
			print("Retrying to set data...")
			task.wait(5)
		until success
	end

	return success
end

return dsFunctions


